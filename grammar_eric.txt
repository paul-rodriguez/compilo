<PROGRAM> |=
			<PROGRAM_RECURSION_U> <PROGRAM_RECURSION_V>
			
<PROGRAM_RECURSION_U> |=
			<FUNCTION_LIST>
			| <INSTRUCTION_LIST>

<PROGRAM_RECURSION_V> |=
			<PROGRAM_FACTORING> <PROGRAM_RECURSION_V>
			| eps
			
<PROGRAM_FACTORING> |=
			<FUNCTION_LIST>
			| <INSTRUCTION_LIST>

<FUNCTION_LIST> |=
			<FUNCTION_LIST_RECURSION_U> <FUNCTION_LIST_RECURSION_V>
			
<FUNCTION_LIST_RECURSION_U> |=
			<FUNCTION>

<FUNCTION_LIST_RECURSION_V> |=
			<FUNCTION> <FUNCTION_LIST_RECURSION_V>
			| eps

<FUNCTION> |=
			SUB IDENTIFIER <FUNCTION_ARGUMENT>
			| LBRACE <INSTRUCTION_LIST> RBRACE

<FUNCTION_ARGUMENT> |=
			LPAR <ARGUMENT_LIST> RPAR
			| eps

<ARGUMENT_LIST> |=
			<ARGUMENT_LIST_RECURSION_U> <ARGUMENT_LIST_RECURSION_V>
			
<ARGUMENT_LIST_RECURSION_U> |=
			VAR
			| eps

<ARGUMENT_LIST_RECURSION_V> |=
			COMMA VAR <ARGUMENT_LIST_RECURSION_V>
			| eps

<INSTRUCTION_LIST> |=
			<INSTRUCTION_LIST_RECURSION_U> <INSTRUCTION_LIST_RECURSION_V>
			
<INSTRUCTION_LIST_RECURSION_U> |=
			LBRACE <INSTRUCTION_LIST> RBRACE
			| <INSTRUCTION> <INSTRUCTION_LIST_FACTORING>

<INSTRUCTION_LIST_RECURSION_V> |=
			SEMICOLON <INSTRUCTION> <INSTRUCTION_LIST_RECURSION_V>
			| eps
			
<INSTRUCTION_LIST_FACTORING> |=
			SEMICOLON
			| eps

<FUNCTION_CALL> |=
			CALL_MARK IDENTIFIER
			| <FUNCTION_CALL_ARGUMENT>

<FUNCTION_CALL_ARGUMENT> |=
			LPAR <ARGUMENT_CALL_LIST> RPAR
			| eps

<ARGUMENT_CALL_LIST> |=
			<ARGUMENT_CALL_LIST_RECURSION_U> <ARGUMENT_CALL_LIST_RECURSION_V>
			
<ARGUMENT_CALL_LIST_RECURSION_U> |=
			<INSTRUCTION>
			| eps

<ARGUMENT_CALL_LIST_RECURSION_V> |=
			COMMA <EXPRESSION> <ARGUMENT_CALL_LIST_RECURSION_V>
			| eps

<INSTRUCTION> |=
			<CONDITION>
			| <EXPRESSION>
			| RETURN <EXPRESSION>

<CONDITION> |=
			<EXPRESSION> <CONDITION_FACTORING>
			| IF <EXPRESSION> LBRACE <INSTRUCTION_LIST> RBRACE <CONDITION_END>
			| UNLESS <EXPRESSION> LBRACE <INSTRUCTION_LIST> RBRACE <CONDITION_END>
			
<CONDITION_FACTORING> |=
			IF <EXPRESSION>
			| UNLESS <EXPRESSION>

<CONDITION_END> |=
			ELSE <EXPRESSION> LBRACE <INSTRUCTION_LIST> RBRACE <CONDITION_END>
			| ELSEIF <EXPRESSION> LBRACE <INSTRUCTION_LIST> RBRACE <CONDITION_END>
			| eps

<SIMPLE_EXPRESSION> |=
			<FUNCTION_CALL>
			| INTEGER
			| FLOAT
			| STRING
			| VAR

<EXPRESSION_ONE> |=
			<EXPRESSION_TWO> <EXPRESSION_ONE_RECURSION_V>
			
<EXPRESSION_ONE_RECURSION_V> |=
			NOTLETTERS <EXPRESSION_TWO> <EXPRESSION_ONE_RECURSION_V>
			| eps

<EXPRESSION_TWO> |=
			<EXPRESSION_THREE> <EXPRESSION_TWO_RECURSION_V>

<EXPRESSION_TWO_RECURSION_V> |=
			ASSIGN_MARK <EXPRESSION_THREE> <EXPRESSION_TWO_RECURSION_V>
			| eps
			
<EXPRESSION_THREE> |=
			<EXPRESSION_FOUR> <EXPRESSION_THREE_RECURSION_V>

<EXPRESSION_THREE_RECURSION_V> |=
			LAZY_OR <EXPRESSION_FOUR> <EXPRESSION_THREE_RECURSION_V>
			| eps
			
<EXPRESSION_FOUR> |=
			<EXPRESSION_FIVE> <EXPRESSION_FOUR_RECURSION_V>

<EXPRESSION_FOUR_RECURSION_V> |=
			LAZY_AND <EXPRESSION_FIVE> <EXPRESSION_FOUR_RECURSION_V>
			| eps
			
<EXPRESSION_FIVE> |=
			<EXPRESSION_SIX> <EXPRESSION_FIVE_RECURSION_V>
			
<EXPRESSION_FIVE_RECURSION_V> |=
			<EXPRESSION_FIVE_FACTORING> <EXPRESSION_FIVE_RECURSION_V>
			| eps
			
<EXPRESSION_FIVE_FACTORING> |=
			DIFFERENT <EXPRESSION_SIX>
			| EQ <EXRESSION_SIX>
			| EQUALS <EXPRESSION_SIX>
			| NE <EXPRESSION_SIX>

<EXPRESSION_SIX> |=
			<EXPRESSION_SEVEN> <EXPRESSION_SIX_RECURSION_V>
			
<EXPRESSION_SIX_RECURSION_V> |=
			<EXPRESSION_SIX_FACTORING> <EXPRESSION_SIX_RECURSION_V>
			| eps
			
<EXPRESSION_SIX_FACTORING> |=
			GE <EXPRESSION_SEVEN>
			| GREATER <EXPRESSION_SEVEN>
			| GREATER_EQUALS <EXPRESSION_SEVEN>
			| GT <EXPRESSION_SEVEN>
			| LE <EXPRESSION_SEVEN>
			| LOWER <EXPRESSION_SEVEN>
			| LOWER_EQUALS <EXPRESSION_SEVEN>
			| LT <EXPRESSION_SEVEN>

<EXPRESSION_SEVEN> |=
			<EXPRESSION_EIGHT> <EXPRESSION_SEVEN_RECURSION_V>
			
<EXPRESSION_SEVEN_RECURSION_V> |=
			<EXPRESSION_SEVEN_FACTORING> <EXPRESSION_SEVEN_RECURSION_V>
			| eps
			
<EXPRESSION_SEVEN_FACTORING> |=
			PLUS <EXPRESSION_EIGHT>
			| MINUS <EXPRESSION_EIGHT>
			| CONCAT_MARK <EXPRESSION_EIGHT>

<EXPRESSION_EIGHT> |=
			<EXPRESSION_NINE> <EXPRESSION_EIGHT_RECURSION_V>
			
<EXPRESSION_EIGHT_RECURSION_V> |=
			<EXPRESSION_EIGHT_FACTORING> <EXPRESSION_EIGHT_RECURSION_V>
			| eps
			
<EXPRESSION_EIGHT_FACTORING> |=
			TIMES <EXPRESSION_NINE>
			| DIVIDE <EXPRESSION_NINE>

<EXPRESSION_NINE> |=
			<EXPRESSION_TEN> <EXPRESSION_NINE_RECURSION_V>
			
<EXPRESSION_NINE_RECURSION_V> |=
			<EXPRESSION_NINE_FACTORING> <EXPRESSION_NINE_RECURSION_V>
			| eps
			
<EXPRESSION_NINE_FACTORING> |=
			NOT <EXPRESSION_TEN>
			| PLUS <EXPRESSION_TEN>
			| MINUS <EXPRESSION_TEN>

<EXPRESSION_TEN> |=
			LPAR <EXPRESSION_ONE> RPAR
			| <SIMPLE_EXPRESSION>